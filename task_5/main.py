#!/usr/bin/env python3
'''
Task:
– Повторити розглянуті матеріали (функції, аргументи функцій та типи аргументів, різні виклики функцій). В інтерактивній сесії перевірити
  як вони працюють

– Написати ряд корисних функцій для роботи зі словниками:

    * операції, що трактують словник як множину (об'єднання словників, диз'юнкція словників, симетрична різниця словників та інші).
    Повний перелік операцій простіше всього побачити на діаграмах Вієна.

    * функцію для сортування словників

    * функцію для перегортання словників (міняє ключі та значення місцями, якщо це можливо, а в разі якщо неможливо – викидає виключення
    (raise ValueError(...))

– Подумати над аргументами функцій, щоб вони були продуманими, універсальними та зручними у використанні

– Потаймити реалізації. У разі якщо на думку спадає декілька реалізацій однієї з функцій – за результатами таймінгу вибрати найбільш оптимальну

– Задокументувати функції за допомогою docstring (інтерфейс), а де необхідно пояснити неочевидні з коду особливості реалізації –
за допомогою коментарів

– Викласти в репозиторій, в окрему директорію два файли: один – модуль, в якому описані функції; а інший – з прикладом їх використання

– (extra) Встановити пакет wemake-python-styleguide та за допомогою утиліти flake8 перевірити код на відповідність coding style. Виправити помилки.
(За основу нашого Coding Style беремо PEP8 з максимальною довжиною строки збільшеною до 100 символів)
'''
from lib import *



if __name__ == '__main__':
    dict1 = {"Sviat": 18, "Andriy": 17, "Oleh": 25, "Anna": 18}
    dict2 = {"Mariya": 38, "Stepan": 60, "Andriy": 17, "Anna": 18}

    output = {
        "Original dict1: ": dict1,
        "Original dict2: ": dict2,
        "Union: ": union(dict1, dict2),
        "Symmetric difference: ": symmetric_difference(dict1, dict2),
        "Disjunction: ": disjunction(dict1, dict2),
        "Common keys: ": common_keys(dict1, dict2),
        "Sorted dict by keys(DESC): ": dict_sort(dict1, dict2, True, 0),
        "Sorted dict by values(ASC): ": dict_sort(dict1, dict2, False, 1),
        "Reversed dict: ": invert_dict(dict1, dict2)
    }

    
    for outer_key, outer_value in output.items():
        print(f'\n{outer_key}')
        for inner_key, inner_value in outer_value.items():
            print(f'\t{inner_key}: {inner_value}')
